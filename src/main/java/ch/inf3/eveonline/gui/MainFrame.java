package ch.inf3.eveonline.gui;

import ch.inf3.eveonline.CharacterInformation;
import ch.inf3.eveonline.SettingFile;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.filefilter.AndFileFilter;
import org.apache.commons.io.filefilter.IOFileFilter;
import org.apache.commons.io.filefilter.NotFileFilter;
import org.apache.commons.io.filefilter.PrefixFileFilter;
import org.apache.commons.io.filefilter.TrueFileFilter;

public class MainFrame extends javax.swing.JFrame {

    private static final Logger LOG = Logger.getLogger(MainFrame.class.getName());

    private File settingsFolder;
    private List<SettingFile> userSetting;
    private List<SettingFile> charSetting;


    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPathPanel = new javax.swing.JPanel();
        jBrowseButton = new javax.swing.JButton();
        jBrowseField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jUserPanel = new javax.swing.JPanel();
        jUserFromCombo = new javax.swing.JComboBox<>();
        jUserToScroll = new javax.swing.JScrollPane();
        jUserToList = new javax.swing.JList<>();
        jUserCopy = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCharPanel = new javax.swing.JPanel();
        jCharFromCombo = new javax.swing.JComboBox<>();
        jCharToScroll = new javax.swing.JScrollPane();
        jCharToList = new javax.swing.JList<>();
        jCharCopy = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPathPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Settings directory"));

        jBrowseButton.setText("Browse");
        jBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBrowseButtonActionPerformed(evt);
            }
        });

        jBrowseField.setEditable(false);

        jLabel5.setText("Path to the user Eve settings directory");

        javax.swing.GroupLayout jPathPanelLayout = new javax.swing.GroupLayout(jPathPanel);
        jPathPanel.setLayout(jPathPanelLayout);
        jPathPanelLayout.setHorizontalGroup(
            jPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPathPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBrowseField, javax.swing.GroupLayout.PREFERRED_SIZE, 668, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBrowseButton)
                .addContainerGap())
        );
        jPathPanelLayout.setVerticalGroup(
            jPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPathPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jBrowseField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5)
                .addComponent(jBrowseButton))
        );

        jUserPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Account"));

        jUserFromCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUserFromComboActionPerformed(evt);
            }
        });

        jUserToScroll.setViewportView(jUserToList);

        jUserCopy.setText("Copy (Overwrite)");
        jUserCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUserCopyActionPerformed(evt);
            }
        });

        jLabel1.setText("User source");

        jLabel2.setText("Users to overwrite");

        javax.swing.GroupLayout jUserPanelLayout = new javax.swing.GroupLayout(jUserPanel);
        jUserPanel.setLayout(jUserPanelLayout);
        jUserPanelLayout.setHorizontalGroup(
            jUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jUserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jUserPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jUserCopy))
                    .addComponent(jUserToScroll, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jUserFromCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jUserPanelLayout.setVerticalGroup(
            jUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jUserPanelLayout.createSequentialGroup()
                .addGroup(jUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jUserFromCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jUserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jUserToScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jUserCopy)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jCharPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Character"));

        jCharFromCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCharFromComboActionPerformed(evt);
            }
        });

        jCharToScroll.setViewportView(jCharToList);

        jCharCopy.setText("Copy (Overwrite)");
        jCharCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCharCopyActionPerformed(evt);
            }
        });

        jLabel3.setText("Char source");

        jLabel4.setText("Chars to overwrite");

        javax.swing.GroupLayout jCharPanelLayout = new javax.swing.GroupLayout(jCharPanel);
        jCharPanel.setLayout(jCharPanelLayout);
        jCharPanelLayout.setHorizontalGroup(
            jCharPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jCharPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jCharPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jCharPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jCharPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jCharCopy))
                    .addComponent(jCharToScroll, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCharFromCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jCharPanelLayout.setVerticalGroup(
            jCharPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jCharPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jCharPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCharFromCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jCharPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jCharPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(0, 44, Short.MAX_VALUE))
                    .addComponent(jCharToScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCharCopy)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPathPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCharPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jUserPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPathPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jUserPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCharPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBrowseButtonActionPerformed
        File file = chooseSettingsFolder();
        if (file != null) {
            jBrowseField.setText(file.getAbsolutePath());
            setSettingsFolder(file);
            readUserData(new File(file, "eanm.properties"));
        }
    }//GEN-LAST:event_jBrowseButtonActionPerformed

    private void jUserFromComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUserFromComboActionPerformed
        updateSelectionFromCombo(jUserFromCombo, jUserToList);
    }//GEN-LAST:event_jUserFromComboActionPerformed

    private void jCharFromComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCharFromComboActionPerformed
        updateSelectionFromCombo(jCharFromCombo, jCharToList);
    }//GEN-LAST:event_jCharFromComboActionPerformed

    private void jUserCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUserCopyActionPerformed
        int selectedFromUser = jUserFromCombo.getSelectedIndex();
        int[] selectedToUsers = jUserToList.getSelectedIndices();

        overwriteWith(userSetting, selectedFromUser, selectedToUsers);
    }//GEN-LAST:event_jUserCopyActionPerformed

    private void jCharCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCharCopyActionPerformed
        int selectedFromUser = jCharFromCombo.getSelectedIndex();
        int[] selectedToUsers = jCharToList.getSelectedIndices();

        overwriteWith(charSetting, selectedFromUser, selectedToUsers);
    }//GEN-LAST:event_jCharCopyActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (settingsFolder != null) {
            saveUserData(new File(settingsFolder, "eanm.properties"));
        }
    }//GEN-LAST:event_formWindowClosing

    private void updateSelectionFromCombo(JComboBox<String> fromCombo, JList<String> toList) {
        int selectedUserIndex = fromCombo.getSelectedIndex();

        if (selectedUserIndex < 0) {
            return;
        }

        int[] selectedIndices = IntStream.range(0, fromCombo.getItemCount())
                .filter(e -> e != selectedUserIndex)
                .toArray();

        toList.setSelectedIndices(selectedIndices);
    }

    private File chooseSettingsFolder() {
        String currentPath = jBrowseField.getText();
        JFileChooser chooser = new JFileChooser(currentPath==null || currentPath.trim().isEmpty() ? "." : currentPath);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = chooser.showOpenDialog(this);
        if(result == JFileChooser.APPROVE_OPTION) {
            File selectedDirectory = chooser.getSelectedFile();

            if(!selectedDirectory.isDirectory()) {
                JOptionPane.showMessageDialog(this, "Please select a directory !", "Not a directory", JOptionPane.ERROR_MESSAGE);
                return null;
            }

            File tranquilityFile = new File(selectedDirectory, "c_tq_tranquility");
            if (!tranquilityFile.isDirectory()) {
                JOptionPane.showMessageDialog(this, "No tranquility settings!", "The selected directory must contain a c_tq_tranquility directory.", JOptionPane.ERROR_MESSAGE);
                return null;
            }

            return selectedDirectory;
        }

        return null;
    }

    public void setSettingsFolder(File settingsFolder) {
        if (settingsFolder == null) {
            return;
        }
        
        jBrowseField.setText(settingsFolder.getAbsolutePath());
        this.settingsFolder = settingsFolder;

        this.userSetting = listSettingFiles(settingsFolder, SettingFile.USER_PREFIX);
        this.charSetting = listSettingFiles(settingsFolder, SettingFile.CHAR_PREFIX);

        jUserFromCombo.removeAllItems();
        jCharFromCombo.removeAllItems();

        this.userSetting.forEach(i -> jUserFromCombo.addItem(i.toString()));
        this.charSetting.forEach(i -> jCharFromCombo.addItem(i.toString()));

        DefaultComboBoxModel<String> userModel = new DefaultComboBoxModel<>();
        this.userSetting.forEach(i -> userModel.addElement(i.toString()));
        jUserToList.setModel(userModel);
        
        DefaultComboBoxModel<String> charModel = new DefaultComboBoxModel<>();
        this.charSetting.forEach(i -> charModel.addElement(i.toString()));
        jCharToList.setModel(charModel);

        updateSelectionFromCombo(jCharFromCombo, jCharToList);
        updateSelectionFromCombo(jUserFromCombo, jUserToList);
    }

    private List<SettingFile> listSettingFiles(File directory, String prefix) {
        IOFileFilter userFilter = new AndFileFilter(new PrefixFileFilter(prefix), new NotFileFilter(new PrefixFileFilter(prefix + "_")));
        Collection<File> userSettingsFiles = FileUtils.listFiles(directory, userFilter, TrueFileFilter.TRUE);

        LOG.log(Level.FINE, "Got {0} files: {1}", new Object[]{userSettingsFiles.size(), userSettingsFiles.stream().map(p -> p.getAbsolutePath()).collect(Collectors.joining(", "))});

        return userSettingsFiles.stream()
                .map(f -> new SettingFile(f))
                .sorted((a, b) -> -1 * Long.compare(a.lastModified(), b.lastModified()))
                .collect(Collectors.toList());
    }

    /**
     * overwrite operation
     * @param file file used to overwrite the others
     */
    private void overwriteWith(List<SettingFile> settingFiles, int fromIndex, int[] toIndices) {
        SettingFile fromSettingFile = settingFiles.get(fromIndex);

        Collection<SettingFile> toSettingFiles = new ArrayList<>();
        for (int toIndex : toIndices) {
            toSettingFiles.add(settingFiles.get(toIndex));
        }

        for (SettingFile f : toSettingFiles) {
            Path from = fromSettingFile.toPath();
            Path to = f.toPath();
            try {
                Files.copy(from, to, StandardCopyOption.REPLACE_EXISTING);
            } catch (IOException e) {
                LOG.log(Level.SEVERE, "Exception while writing setting file: ", e);
                JOptionPane.showMessageDialog(this, "Error while overwriting settings", "Error is: " + e.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);

            }
        }
    }

    private void saveUserData(File file) {
        Properties props = new Properties();

        CharacterInformation.saveCache(props);

        try (FileOutputStream fos = new FileOutputStream(file)) {
            props.store(fos, "Eve Settings Manager");
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, "Exception while writing properties file: ", ex);
            JOptionPane.showMessageDialog(this, "Error while writing the properties", "Error is: " + ex.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
        }
    }

    private void readUserData(File file) {
        if (!file.isFile()) {
            return;
        }

        Properties props = new Properties();

        try (FileInputStream fis = new FileInputStream(file)) {
            props.load(fis);

            CharacterInformation.loadCache(props);
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, "Exception while reading properties file: ", ex);
            JOptionPane.showMessageDialog(this, "Error while reading the properties", "Error is: " + ex.getLocalizedMessage(), JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBrowseButton;
    private javax.swing.JTextField jBrowseField;
    private javax.swing.JButton jCharCopy;
    private javax.swing.JComboBox<String> jCharFromCombo;
    private javax.swing.JPanel jCharPanel;
    private javax.swing.JList<String> jCharToList;
    private javax.swing.JScrollPane jCharToScroll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPathPanel;
    private javax.swing.JButton jUserCopy;
    private javax.swing.JComboBox<String> jUserFromCombo;
    private javax.swing.JPanel jUserPanel;
    private javax.swing.JList<String> jUserToList;
    private javax.swing.JScrollPane jUserToScroll;
    // End of variables declaration//GEN-END:variables
}
